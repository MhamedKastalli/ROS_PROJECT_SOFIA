# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_navigation/Pov.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class Pov(genpy.Message):
  _md5sum = "2b3eac4f3850f7049a58dd73defae320"
  _type = "robot_navigation/Pov"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time stamp
string frame_id
string Direction
float64 Ceiling_height_near
float64 Ceiling_height_mid
float64 Ceiling_height_far
float64 Wall_distance_near
float64 Wall_distance_mid
float64 Wall_distance_far
float64 Floor_distance
float64 Floor_slope
string Floor_type
string Wall_type
string Ceiling_type

"""
  __slots__ = ['stamp','frame_id','Direction','Ceiling_height_near','Ceiling_height_mid','Ceiling_height_far','Wall_distance_near','Wall_distance_mid','Wall_distance_far','Floor_distance','Floor_slope','Floor_type','Wall_type','Ceiling_type']
  _slot_types = ['time','string','string','float64','float64','float64','float64','float64','float64','float64','float64','string','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,frame_id,Direction,Ceiling_height_near,Ceiling_height_mid,Ceiling_height_far,Wall_distance_near,Wall_distance_mid,Wall_distance_far,Floor_distance,Floor_slope,Floor_type,Wall_type,Ceiling_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Pov, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.frame_id is None:
        self.frame_id = ''
      if self.Direction is None:
        self.Direction = ''
      if self.Ceiling_height_near is None:
        self.Ceiling_height_near = 0.
      if self.Ceiling_height_mid is None:
        self.Ceiling_height_mid = 0.
      if self.Ceiling_height_far is None:
        self.Ceiling_height_far = 0.
      if self.Wall_distance_near is None:
        self.Wall_distance_near = 0.
      if self.Wall_distance_mid is None:
        self.Wall_distance_mid = 0.
      if self.Wall_distance_far is None:
        self.Wall_distance_far = 0.
      if self.Floor_distance is None:
        self.Floor_distance = 0.
      if self.Floor_slope is None:
        self.Floor_slope = 0.
      if self.Floor_type is None:
        self.Floor_type = ''
      if self.Wall_type is None:
        self.Wall_type = ''
      if self.Ceiling_type is None:
        self.Ceiling_type = ''
    else:
      self.stamp = genpy.Time()
      self.frame_id = ''
      self.Direction = ''
      self.Ceiling_height_near = 0.
      self.Ceiling_height_mid = 0.
      self.Ceiling_height_far = 0.
      self.Wall_distance_near = 0.
      self.Wall_distance_mid = 0.
      self.Wall_distance_far = 0.
      self.Floor_distance = 0.
      self.Floor_slope = 0.
      self.Floor_type = ''
      self.Wall_type = ''
      self.Ceiling_type = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8d().pack(_x.Ceiling_height_near, _x.Ceiling_height_mid, _x.Ceiling_height_far, _x.Wall_distance_near, _x.Wall_distance_mid, _x.Wall_distance_far, _x.Floor_distance, _x.Floor_slope))
      _x = self.Floor_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Wall_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Ceiling_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Direction = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.Ceiling_height_near, _x.Ceiling_height_mid, _x.Ceiling_height_far, _x.Wall_distance_near, _x.Wall_distance_mid, _x.Wall_distance_far, _x.Floor_distance, _x.Floor_slope,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Floor_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Floor_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Wall_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Wall_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Ceiling_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Ceiling_type = str[start:end]
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Direction
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8d().pack(_x.Ceiling_height_near, _x.Ceiling_height_mid, _x.Ceiling_height_far, _x.Wall_distance_near, _x.Wall_distance_mid, _x.Wall_distance_far, _x.Floor_distance, _x.Floor_slope))
      _x = self.Floor_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Wall_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Ceiling_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Direction = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Direction = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.Ceiling_height_near, _x.Ceiling_height_mid, _x.Ceiling_height_far, _x.Wall_distance_near, _x.Wall_distance_mid, _x.Wall_distance_far, _x.Floor_distance, _x.Floor_slope,) = _get_struct_8d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Floor_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Floor_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Wall_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Wall_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Ceiling_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Ceiling_type = str[start:end]
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
